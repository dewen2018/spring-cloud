server:
  port: 80


spring:
  servlet:
    multipart:
      max-file-size: 1024MB
      max-request-size: 20MB
  application:
    name: api-gateway
  profiles:
    active: dev
  cloud:
    inetutils:
      ignored-interfaces: 'VMware Virtual Ethernet Adapter for VMnet1,VMware Virtual Ethernet Adapter for VMnet8,Hyper-V Virtual Ethernet Adapter'
    nacos:
      username: nacos
      password: nacos
      server-addr: 192.168.0.102:8848
      config:
        server-addr:
        namespace: 5f164af6-f960-4c6a-8dc4-0f6e513dc358
        # 配置文件分组，如果不写，默认值为 DEFAULT_GROUP
        group: cloud-nacos
        # 配置文件前缀，如果不写，默认为应用程序名称，即spring.application.name
        prefix: api-gateway
        # 配置文件后缀，如果不写，默认值为 properties，nacos 2.0以后支持的格式有很多，具体参考配置中心
        file-extension: yaml
        enabled: true
        refresh-enabled: true
        # enable-remote-sync-config: true
        # 主配置 最大重试次数
        max-retry: 3
        # 主配置 重试时间
        config-retry-time: 2000
        # 共享配置, 可以把公共配置放在同个命名空间下，然后创建一个 common.yml 文件 ，里面可以放共用的配置
        # shared-configs: common.yml
      discovery:
        enabled: true
        register-enabled: true
        namespace: 5f164af6-f960-4c6a-8dc4-0f6e513dc358
        group: cloud-nacos

    # 网关配置
    gateway:
      discovery:
        locator:
          enabled: true
          lower-case-service-id: true
      routes:
        # 路由的ID，没有固定规则但要求唯一，建议配置服务名称
        ## 一个请求地址一个转发
#        - id: api-server
        #          # 匹配后提供服务的路由地址
        #          uri: "http://127.0.0.1:7000"
        #          # 路由条件（predicates：断言，匹配 HTTP 请求内容）
        #          predicates:
        #            # 转发地址格式为 uri/getUserName
        #            - Path=/apiServer/user/getUserName
        ## 断言，路径相匹配的进行路由：/apiServer/*
        #        - id: api-server2
        #          # 匹配后提供服务的路由地址
        #          uri: "http://127.0.0.1:7000"
        #          # 路由条件（predicates：断言，匹配 HTTP 请求内容）
        #          predicates:
        #            # 转发地址格式为 uri/getUserName
        #            - Path=/apiServer/*
        ## uri使用lb://
        - id: api-server3
          uri: lb://api-server
          predicates:
            - Path=/apiServer/*
        - id: api-customer
          uri: lb://api-customer
          predicates:
            - Path=/apiCustomer/*
        ## 还没想好，暂时先请求网关本身
        - id: api-serverxx
          uri: lb://api-gateway
          predicates:
            - Path=/**

#      globalcors:
#        corsConfigurations:
#          '[/**]':
#            allowedOrigins: "https://127.0.0.1"
#            allowedMethods:
#              - GET
#            allowHeaders:
#              - Content-Type
#
#management:
#  endpoints:
#    web:
#      exposure:
#        include: "*"




